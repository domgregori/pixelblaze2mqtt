{
  "name": "NaturalLightSync",
  "id": "kRdHmgPMZBDSoh2zT",
  "sources": {
    "main": "/*\n  ---Program to smoothly change lights to the color temperature of natural daylight---\n  \n  color temp conversion code borrowed from UtilityColorTemp program\n\n\nVariables to set:\n  -sunrise and sunset time (24hr clock)\n  -maxTemp in the color temperture when the sun is highest (higher = blue-er); default is 5700\n  -minTemp is the color temperature when the sun is lowest (lower = red-er); default is 2500\n\nafter sunset/before sunrise color temp will remain at mixTemp\n\n*/\n\nvar sunrise = 7;\nvar sunset = 20;\nvar maxTemp = (5000)/100;\nvar minTemp = (2500)/100;\n\n\nvar r,g,b;\n\n\nfunction ctToRGB(ct){\n    \n    if( ct < 67 ){ \n        r = 1;\n        g = 0.5313 * log(ct) - 1.2909;\n        \n        if( ct <= 19){\n            b = 0;\n        } else {\n            b = 0.0223 * ct - 0.5063;\n        }\n    } else {\n        r = 38.309 * pow(ct,-0.886);\n        g = 10.771 * pow(ct,-0.588);\n        b = 1;\n    }\n    \n    r = clamp(r,0, 1);\n    g = clamp(g,0, 1);\n    b = clamp(b,0, 1);\n}\n\nexport var ct;\nexport var timeOfDay;\n\nexport function beforeRender(delta) {\n  timeOfDay = clockHour() + clockMinute()/60 + clockSecond()/60/60;\n  \n  if ((timeOfDay >= sunrise) && (timeOfDay <= sunset)) {\n    var peak = ((sunset-sunrise)/2)+sunrise\n    var a = (minTemp-maxTemp)/pow((sunrise-peak), 2);\n    ct = (a*pow((timeOfDay-peak),2))+maxTemp;\n  } else {\n    ct = minTemp;\n  }\n  \n  ctToRGB(ct);\n}\n\nexport function render(index) {\n  rgb(r,g,b);\n}"
  },
  "preview": "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"
}